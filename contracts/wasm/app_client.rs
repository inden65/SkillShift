// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rs::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
pub struct AppFactory<R> {
    #[allow(dead_code)]
    remoting: R,
}

impl<R> AppFactory<R> {
    #[allow(unused)]
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}

impl<R: Remoting + Clone> traits::AppFactory for AppFactory<R> {
    type Args = R::Args;
    fn new(&self) -> impl Activation<Args = R::Args> {
        RemotingAction::<_, app_factory::io::New>::new(self.remoting.clone(), ())
    }
}

pub mod app_factory {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct New(());

        impl New {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <New as ActionIo>::encode_call(&())
            }
        }

        impl ActionIo for New {
            const ROUTE: &'static [u8] = &[12, 78, 101, 119];
            type Params = ();
            type Reply = ();
        }
    }
}
pub struct Ping<R> {
    remoting: R,
}

impl<R> Ping<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}

impl<R: Remoting + Clone> traits::Ping for Ping<R> {
    type Args = R::Args;
    fn ping(&mut self) -> impl Call<Output = PingEnum, Args = R::Args> {
        RemotingAction::<_, ping::io::Ping>::new(self.remoting.clone(), ())
    }
    fn pong(&mut self) -> impl Call<Output = PingEnum, Args = R::Args> {
        RemotingAction::<_, ping::io::Pong>::new(self.remoting.clone(), ())
    }
    fn all_calls(&self) -> impl Query<Output = Vec<(ActorId, PingEnum)>, Args = R::Args> {
        RemotingAction::<_, ping::io::AllCalls>::new(self.remoting.clone(), ())
    }
    fn last_who_call(&self) -> impl Query<Output = (ActorId, PingEnum), Args = R::Args> {
        RemotingAction::<_, ping::io::LastWhoCall>::new(self.remoting.clone(), ())
    }
}

pub mod ping {
    use super::*;

    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct Ping(());

        impl Ping {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <Ping as ActionIo>::encode_call(&())
            }
        }

        impl ActionIo for Ping {
            const ROUTE: &'static [u8] = &[16, 80, 105, 110, 103, 16, 80, 105, 110, 103];
            type Params = ();
            type Reply = super::PingEnum;
        }
        pub struct Pong(());

        impl Pong {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <Pong as ActionIo>::encode_call(&())
            }
        }

        impl ActionIo for Pong {
            const ROUTE: &'static [u8] = &[16, 80, 105, 110, 103, 16, 80, 111, 110, 103];
            type Params = ();
            type Reply = super::PingEnum;
        }
        pub struct AllCalls(());

        impl AllCalls {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <AllCalls as ActionIo>::encode_call(&())
            }
        }

        impl ActionIo for AllCalls {
            const ROUTE: &'static [u8] = &[
                16, 80, 105, 110, 103, 32, 65, 108, 108, 67, 97, 108, 108, 115,
            ];
            type Params = ();
            type Reply = Vec<(ActorId, super::PingEnum)>;
        }
        pub struct LastWhoCall(());

        impl LastWhoCall {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <LastWhoCall as ActionIo>::encode_call(&())
            }
        }

        impl ActionIo for LastWhoCall {
            const ROUTE: &'static [u8] = &[
                16, 80, 105, 110, 103, 44, 76, 97, 115, 116, 87, 104, 111, 67, 97, 108, 108,
            ];
            type Params = ();
            type Reply = (ActorId, super::PingEnum);
        }
    }
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum PingEnum {
    Ping,
    Pong,
}

pub mod traits {
    use super::*;
    #[allow(dead_code)]
    pub trait AppFactory {
        type Args;
        #[allow(clippy::new_ret_no_self)]
        #[allow(clippy::wrong_self_convention)]
        fn new(&self) -> impl Activation<Args = Self::Args>;
    }

    #[allow(clippy::type_complexity)]
    pub trait Ping {
        type Args;
        fn ping(&mut self) -> impl Call<Output = PingEnum, Args = Self::Args>;
        fn pong(&mut self) -> impl Call<Output = PingEnum, Args = Self::Args>;
        fn all_calls(&self) -> impl Query<Output = Vec<(ActorId, PingEnum)>, Args = Self::Args>;
        fn last_who_call(&self) -> impl Query<Output = (ActorId, PingEnum), Args = Self::Args>;
    }
}
