// Code generated by sails-client-gen. DO NOT EDIT.
#[allow(unused_imports)]
use sails_rs::collections::BTreeMap;
#[allow(unused_imports)]
use sails_rs::{
    calls::{Activation, Call, Query, Remoting, RemotingAction},
    prelude::*,
    String,
};
pub struct AppFactory<R> {
    #[allow(dead_code)]
    remoting: R,
}
impl<R> AppFactory<R> {
    #[allow(unused)]
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::AppFactory for AppFactory<R> {
    type Args = R::Args;
    fn new(&self) -> impl Activation<Args = R::Args> {
        RemotingAction::<_, app_factory::io::New>::new(self.remoting.clone(), ())
    }
}

pub mod app_factory {
    use super::*;
    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct New(());
        impl New {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <New as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for New {
            const ROUTE: &'static [u8] = &[12, 78, 101, 119];
            type Params = ();
            type Reply = ();
        }
    }
}
pub struct Service<R> {
    remoting: R,
}
impl<R> Service<R> {
    pub fn new(remoting: R) -> Self {
        Self { remoting }
    }
}
impl<R: Remoting + Clone> traits::Service for Service<R> {
    type Args = R::Args;
    fn add_cliente(
        &mut self,
        id: ActorId,
        nombre: String,
    ) -> impl Call<Output = Events, Args = R::Args> {
        RemotingAction::<_, service::io::AddCliente>::new(self.remoting.clone(), (id, nombre))
    }
    fn add_profesionista(
        &mut self,
        id: ActorId,
        nombre: String,
        especialidad: String,
    ) -> impl Call<Output = Events, Args = R::Args> {
        RemotingAction::<_, service::io::AddProfesionista>::new(
            self.remoting.clone(),
            (id, nombre, especialidad),
        )
    }
    fn add_trato(
        &mut self,
        profesionista_id: ActorId,
        cliente_id: ActorId,
        descripcion: String,
        pagos: [Option<(u128, bool)>; 5],
    ) -> impl Call<Output = Events, Args = R::Args> {
        RemotingAction::<_, service::io::AddTrato>::new(
            self.remoting.clone(),
            (profesionista_id, cliente_id, descripcion, pagos),
        )
    }
    fn query_clientes(&self) -> impl Query<Output = Vec<Cliente>, Args = R::Args> {
        RemotingAction::<_, service::io::QueryClientes>::new(self.remoting.clone(), ())
    }
    fn query_profesionistas(&self) -> impl Query<Output = Vec<Profesionista>, Args = R::Args> {
        RemotingAction::<_, service::io::QueryProfesionistas>::new(self.remoting.clone(), ())
    }
    fn query_tratos(&self) -> impl Query<Output = Vec<Trato>, Args = R::Args> {
        RemotingAction::<_, service::io::QueryTratos>::new(self.remoting.clone(), ())
    }
}

pub mod service {
    use super::*;

    pub mod io {
        use super::*;
        use sails_rs::calls::ActionIo;
        pub struct AddCliente(());
        impl AddCliente {
            #[allow(dead_code)]
            pub fn encode_call(id: ActorId, nombre: String) -> Vec<u8> {
                <AddCliente as ActionIo>::encode_call(&(id, nombre))
            }
        }
        impl ActionIo for AddCliente {
            const ROUTE: &'static [u8] = &[
                28, 83, 101, 114, 118, 105, 99, 101, 40, 65, 100, 100, 67, 108, 105, 101, 110, 116,
                101,
            ];
            type Params = (ActorId, String);
            type Reply = super::Events;
        }
        pub struct AddProfesionista(());
        impl AddProfesionista {
            #[allow(dead_code)]
            pub fn encode_call(id: ActorId, nombre: String, especialidad: String) -> Vec<u8> {
                <AddProfesionista as ActionIo>::encode_call(&(id, nombre, especialidad))
            }
        }
        impl ActionIo for AddProfesionista {
            const ROUTE: &'static [u8] = &[
                28, 83, 101, 114, 118, 105, 99, 101, 64, 65, 100, 100, 80, 114, 111, 102, 101, 115,
                105, 111, 110, 105, 115, 116, 97,
            ];
            type Params = (ActorId, String, String);
            type Reply = super::Events;
        }
        pub struct AddTrato(());
        impl AddTrato {
            #[allow(dead_code)]
            pub fn encode_call(
                profesionista_id: ActorId,
                cliente_id: ActorId,
                descripcion: String,
                pagos: [Option<(u128, bool)>; 5],
            ) -> Vec<u8> {
                <AddTrato as ActionIo>::encode_call(&(
                    profesionista_id,
                    cliente_id,
                    descripcion,
                    pagos,
                ))
            }
        }
        impl ActionIo for AddTrato {
            const ROUTE: &'static [u8] = &[
                28, 83, 101, 114, 118, 105, 99, 101, 32, 65, 100, 100, 84, 114, 97, 116, 111,
            ];
            type Params = (ActorId, ActorId, String, [Option<(u128, bool)>; 5]);
            type Reply = super::Events;
        }
        pub struct QueryClientes(());
        impl QueryClientes {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <QueryClientes as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for QueryClientes {
            const ROUTE: &'static [u8] = &[
                28, 83, 101, 114, 118, 105, 99, 101, 52, 81, 117, 101, 114, 121, 67, 108, 105, 101,
                110, 116, 101, 115,
            ];
            type Params = ();
            type Reply = Vec<super::Cliente>;
        }
        pub struct QueryProfesionistas(());
        impl QueryProfesionistas {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <QueryProfesionistas as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for QueryProfesionistas {
            const ROUTE: &'static [u8] = &[
                28, 83, 101, 114, 118, 105, 99, 101, 76, 81, 117, 101, 114, 121, 80, 114, 111, 102,
                101, 115, 105, 111, 110, 105, 115, 116, 97, 115,
            ];
            type Params = ();
            type Reply = Vec<super::Profesionista>;
        }
        pub struct QueryTratos(());
        impl QueryTratos {
            #[allow(dead_code)]
            pub fn encode_call() -> Vec<u8> {
                <QueryTratos as ActionIo>::encode_call(&())
            }
        }
        impl ActionIo for QueryTratos {
            const ROUTE: &'static [u8] = &[
                28, 83, 101, 114, 118, 105, 99, 101, 44, 81, 117, 101, 114, 121, 84, 114, 97, 116,
                111, 115,
            ];
            type Params = ();
            type Reply = Vec<super::Trato>;
        }
    }
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub enum Events {
    ProfesionistaAdded(ActorId),
    ClienteAdded(ActorId),
    TratoAdded((ActorId, ActorId)),
    Error(String),
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct Cliente {
    pub id: ActorId,
    pub nombre: String,
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct Profesionista {
    pub id: ActorId,
    pub nombre: String,
    pub especialidad: String,
}
#[derive(PartialEq, Clone, Debug, Encode, Decode, TypeInfo)]
#[codec(crate = sails_rs::scale_codec)]
#[scale_info(crate = sails_rs::scale_info)]
pub struct Trato {
    pub profesionista_id: ActorId,
    pub cliente_id: ActorId,
    pub descripcion: String,
    pub pagos: [Option<(u128, bool)>; 5],
}

pub mod traits {
    use super::*;
    #[allow(dead_code)]
    pub trait AppFactory {
        type Args;
        #[allow(clippy::new_ret_no_self)]
        #[allow(clippy::wrong_self_convention)]
        fn new(&self) -> impl Activation<Args = Self::Args>;
    }

    #[allow(clippy::type_complexity)]
    pub trait Service {
        type Args;
        fn add_cliente(
            &mut self,
            id: ActorId,
            nombre: String,
        ) -> impl Call<Output = Events, Args = Self::Args>;
        fn add_profesionista(
            &mut self,
            id: ActorId,
            nombre: String,
            especialidad: String,
        ) -> impl Call<Output = Events, Args = Self::Args>;
        fn add_trato(
            &mut self,
            profesionista_id: ActorId,
            cliente_id: ActorId,
            descripcion: String,
            pagos: [Option<(u128, bool)>; 5],
        ) -> impl Call<Output = Events, Args = Self::Args>;
        fn query_clientes(&self) -> impl Query<Output = Vec<Cliente>, Args = Self::Args>;
        fn query_profesionistas(
            &self,
        ) -> impl Query<Output = Vec<Profesionista>, Args = Self::Args>;
        fn query_tratos(&self) -> impl Query<Output = Vec<Trato>, Args = Self::Args>;
    }
}
